server:
  port: 9999

spring:
  application:
    name: spring-cloud-gateway
  main:
    banner-mode: off
  jwt:
    secret-key: "jwt.token.secret"
  threads:
    virtual:
      enabled: true
  cloud:
    gateway:
      default-filters: # 모든 라우팅에 적용되는 global 필터
        - DedupeResponseHeader=Access-Control-Allow-Origin Access-Control-Allow-Credentials, RETAIN_UNIQUE
        - name: LoggingFilter
          args:
            preLogger: true
            postLogger: true
      routes:
        - id: management/file-manage/upload/{fileManageCd}
          uri: http://localhost:8080 # management host
          predicates:
            - Path=/management/file-manage/upload/{fileManageCd}
            - Method=GET
          filters:
            - name: AuthenticationFilter
              args:
                allow-role:
                  - ADMIN
                  - MARKETING
                  - SETTLE
        - id: management/file-manage/pre-signed-url/{fileManageCd}
          uri: http://localhost:8080 # management host
          predicates:
            - Path=/management/file-manage/pre-signed-url/{fileManageCd}
            - Method=GET
          filters:
            - name: AuthenticationFilter
              args:
                allow-role:
                  - ADMIN
                  - CS
                  - SALES
                  - MARKETING
                  - SETTLE
# circuitbreaker 설정
resilience4j:
  circuitbreaker:
    instances:
      defaultCircuitBreaker:
        slidingWindowSize: 100
        failureRateThreshold: 50
        minimumNumberOfCalls: 10
        waitDurationInOpenState: 10s
  timelimiter:
    instances:
      defaultCircuitBreaker:
        timeoutDuration: 5s
# actuator 설정
management:
  endpoints:
    web:
      exposure:
        include: health, info, gateway
  endpoint:
    health:
      enabled: true
      probes:
        enabled: true
    gateway:
      enabled: true
  health:
    livenessState:
      enabled: true
    readinessState:
      enabled: true
